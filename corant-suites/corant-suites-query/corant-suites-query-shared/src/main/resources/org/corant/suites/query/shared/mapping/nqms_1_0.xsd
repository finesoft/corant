<?xml version="1.0" encoding="utf-8"?>
<xsd:schema targetNamespace="http://corant.org/schema/nqms" xmlns:nqms="http://corant.org/schema/nqms"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
            attributeFormDefault="unqualified">
    <xsd:element name="query-mappings">
        <xsd:annotation>
            <xsd:documentation>The root query mapping with at least one query element.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element name="parameters-mapping" type="nqms:parameters-mapping" maxOccurs="1" minOccurs="0"/>
                <xsd:element name="common-segment" type="nqms:common-segment" maxOccurs="1" minOccurs="0"/>
                <xsd:element name="query" type="nqms:query" minOccurs="1" maxOccurs="unbounded"/>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>

    <xsd:complexType name="parameters-mapping">
        <xsd:annotation>
            <xsd:documentation>The query parameter type mappings.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="entry" type="nqms:parameter-type-mapping" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:complexType name="parameter-type-mapping">
        <xsd:annotation>
            <xsd:documentation>
                The query parameter type mapping element, the name is parameter name,
                the type is parameter's java class path such as 'java.math.BigDecimal'.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="name" type="xsd:string" use="required"></xsd:attribute>
        <xsd:attribute name="type" type="xsd:string" use="required"></xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="property">
        <xsd:annotation>
            <xsd:documentation>
                The append property.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="name" type="xsd:string" use="required"></xsd:attribute>
        <xsd:attribute name="value" type="xsd:string" use="required"></xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="properties">
        <xsd:annotation>
            <xsd:documentation>
                The properties map.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="property" type="nqms:property" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="query">
        <xsd:annotation>
            <xsd:documentation>
                The query element with at least one script element, may be include fetch query or hints.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="description" type="xsd:string" maxOccurs="1" minOccurs="0"/>
            <xsd:element name="properties" type="nqms:properties" maxOccurs="1" minOccurs="0"/>
            <xsd:element name="script" type="nqms:script" maxOccurs="1" minOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>The query script, default script is freemarker.</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="fetch-query" type="nqms:fetch-query" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="hint" type="nqms:hint" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    The query name must be uniqueness, the actual name maybe append version mark.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="result-class" type="xsd:string" use="optional" default="java.util.Map">
            <xsd:annotation>
                <xsd:documentation>
                    The query result class, default is 'java.util.Map' such as map&lt;String,?&gt;
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="result-set-mapping" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation>Reserve zone</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="cache" type="xsd:boolean" use="optional" default="false">
            <xsd:annotation>
                <xsd:documentation>Reserve zone</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="cache-resultset-metadata" type="xsd:boolean" use="optional" default="false">
            <xsd:annotation>
                <xsd:documentation>Reserve zone</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="version" type="xsd:string" use="optional"></xsd:attribute>
    </xsd:complexType>


    <xsd:complexType name="fetch-query">
        <xsd:annotation>
            <xsd:documentation>
                The other query use assign parent query result and parameters, use for one to many/one.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
			<xsd:element name="predicate-script" type="nqms:script" maxOccurs="1" minOccurs="0" nillable="false">
                <xsd:annotation>
                    <xsd:documentation>
                    	The precondition script for decide execute this fetch query or not,
                        script may be a function that receive query param and return bool,
                        the default script type is Java Script. 
                        Example: 
                         (function(p,r){ 
								return p.criteria.get("key")!=null || r.get("key")!=null;
						 })(p,r);
						 the parameter 'p' is the query parameter criteria, usually is java.util.Map; 
						 the parameter 'r' is the parent query result record, usually is java util.Map;
						 the function must return boolean result.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>        
            <xsd:element name="parameter" type="nqms:fetch-query-parameter" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="injection-script" type="nqms:script" maxOccurs="1" minOccurs="0" nillable="false">
                <xsd:annotation>
                    <xsd:documentation>
                    	<![CDATA[
                    	Experimental feature. Scripts for injection processing, 
                    	the default script type is Java Script. Script may be a function that receive 
                    	parent query result record and fetch query result record, you can programic 
                    	handle parent query result record use those parameters.
                    	Example:
						(function(r,frs){ 
							for each(var fr in frs){
								if(r.get("key").equals(fr.get("key"))){
									r.put("inject property name",fr);
								}
							}
						})(r,frs);           
						the parameter 'r' is the parent query result record and the parameter 'frs' 
						is the fetch query result records, usually the parameter 'r' is java.util.Map,
						the paremeter 'frs' is java.util.ArrayList<java.util.Map>
						the function return value is ignored.    
						]]>    	
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>    
        </xsd:sequence>
        <xsd:attribute name="reference-query" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>
                    The name of actual execution query for fetch query.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="inject-property-name" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                	<![CDATA[
                    The property name in parent query result to inject the fetch query result.
                    Note: If <injection-script> is specified, <injection-script> is preferred.
                    ]]>  
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="max-fetch-size" type="xsd:positiveInteger" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    The fetch query result size, default is 1024.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="eager-inject" type="xsd:boolean" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    Represents whether to grab immediately, if true the fetch query is launched 
                    when the result set of each parent query is processed; otherwise the fetch query
                    is launched after the result set of all parent queries has been processed, 
                    Useful for paging queries, especially to reduce the use of connection pooling.
                    Default is true.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="reference-query-version" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    The version of actual execution query for fetch query.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="reference-query-type" type="nqms:query-type" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    The query type of actual execution query for fetch query, If not set use the parent query service.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>        
        <xsd:attribute name="reference-query-qualifier" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    The query type qualifier of actual execution query for fetch query.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>             
        <xsd:attribute name="result-class" type="xsd:string" use="optional"></xsd:attribute>
        <xsd:attribute name="multi-records" type="xsd:boolean" use="optional">
            <xsd:annotation>
                <xsd:documentation>
                    Specify whether the query result set is multi-record or single-record,
                    similar to one to manager or one to one.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="fetch-query-parameter">
        <xsd:annotation>
            <xsd:documentation>The fetch query parameters</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="name" type="xsd:string" use="required"></xsd:attribute>
        <xsd:attribute name="source-name" type="xsd:string" use="optional"></xsd:attribute>
        <xsd:attribute name="source" type="nqms:fetch-query-parameter-source" use="required"></xsd:attribute>
        <xsd:attribute name="value" type="xsd:string" use="optional"></xsd:attribute>
        <xsd:attribute name="type" type="xsd:string" use="optional"></xsd:attribute>
    </xsd:complexType>
    
    <xsd:simpleType name="fetch-query-parameter-source">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="P">
                <xsd:annotation>
                    <xsd:documentation>Parameter value from parent query parameter.</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="R">
                <xsd:annotation>
                    <xsd:documentation>Parameter value from parent query result.</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="C">
                <xsd:annotation>
                    <xsd:documentation>Parameter value is constant.</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="hint">
        <xsd:annotation>
            <xsd:documentation>
            	The query hints for additional query parameter process or result process.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="parameter" type="nqms:hint-parameter" minOccurs="0" maxOccurs="unbounded"></xsd:element>
            <xsd:element name="script" type="xsd:string" maxOccurs="1" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>The script for hint</xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="key" type="xsd:string"></xsd:attribute>
    </xsd:complexType>
    
    <xsd:complexType name="hint-parameter">
        <xsd:attribute name="name" type="xsd:string"></xsd:attribute>
        <xsd:attribute name="value" type="xsd:string"></xsd:attribute>
        <xsd:attribute name="type" type="xsd:string" use="optional" default="java.lang.String"></xsd:attribute>
    </xsd:complexType>

    <xsd:simpleType name="common-segment">
        <xsd:restriction base="xsd:string"></xsd:restriction>
    </xsd:simpleType>
    
    <xsd:complexType name="script">
        <xsd:annotation>
            <xsd:documentation>
                The scripts that are used for dynamically generating query statements or handle query parameter or handle query result.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
      		<xsd:extension base="xsd:string">
         		<xsd:attribute name="type" type="nqms:script-type" use="optional"></xsd:attribute>
        		<xsd:attribute name="src" type="xsd:string" use="optional"></xsd:attribute>
      		</xsd:extension>
    	</xsd:simpleContent>
    </xsd:complexType>
    
    <xsd:simpleType name="script-type">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="JS">
                <xsd:annotation>
                    <xsd:documentation>Specify that the script language is Java Script.</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="FM">
                <xsd:annotation>
                    <xsd:documentation>Specify that the script language is Freemarker.</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>    
        
 	<xsd:simpleType name="query-type">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="SQL">
                <xsd:annotation>
                    <xsd:documentation>Use sql query service to execute the fetch query.</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="MG">
                <xsd:annotation>
                    <xsd:documentation>Use mongodb query service to execute the fetch query.</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="ES">
                <xsd:annotation>
                    <xsd:documentation>Use elastic query service to execute the fetch query.</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="JPQL">
                <xsd:annotation>
                    <xsd:documentation>Use jpql query service to execute the fetch query.</xsd:documentation>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>        
        
</xsd:schema>